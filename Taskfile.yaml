version: '3'

vars:
  NATS_SERVER: "nats://localhost:4222"
  NATS_USER: "home"
  NATS_PASS: "changeme"
  CONTAINER_TOOL: '{{default "docker" .CONTAINER_TOOL}}'

includes:
  services: ./services/Taskfile.yaml
  tools: ./tools/Taskfile.yaml
  bridges: ./bridges/Taskfile.yaml
  esphome: ./esphome-components/Taskfile.yaml
  infra: ./infrastructure/Taskfile.yaml

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # === SETUP TASKS ===
  setup:
    desc: Complete project setup with all dependencies
    cmds:
      - task: infra:setup
      - task: deps
      - |
        echo "‚úÖ Setup complete!"
        echo ""
        echo "Quick start options:"
        echo "  - 'task dev' - Start ALL services in tmux (recommended!)"
        echo "  - 'task up' - Start with Docker Compose"
        echo "  - 'task start' - Start NATS only + show manual instructions"

  deps:
    desc: Install all project dependencies
    cmds:
      - echo "Installing dependencies..."
      - go install github.com/nats-io/natscli/nats@latest || echo "‚ö†Ô∏è  Failed to install NATS CLI (Go required)"
      - cd services/discovery && go mod download || echo "‚ö†Ô∏è  Failed to download Go dependencies"
      - cd services/management-ui && go mod download || echo "‚ö†Ô∏è  Failed to download Go dependencies"
      - cd services/health-monitor && go mod download || echo "‚ö†Ô∏è  Failed to download Go dependencies"
      - echo "‚úÖ Dependencies installed"

  # === START/STOP TASKS ===
  start:
    desc: Start NATS server and show instructions for starting other services
    cmds:
      - task: infra:start-dev
      - |
        echo ""
        echo "üöÄ NATS is running!"
        echo ""
        echo "To start all services, run these commands in separate terminals:"
        echo ""
        echo "Terminal 1 - Discovery Service:"
        echo "  cd services/discovery && go run main.go"
        echo ""
        echo "Terminal 2 - Health Monitor:"
        echo "  cd services/health-monitor && go run main.go"
        echo ""
        echo "Terminal 3 - Management UI:"
        echo "  cd services/management-ui && go run main.go"
        echo ""
        echo "Or use one of these alternatives:"
        echo "  ‚Ä¢ 'task dev' - Run all in tmux (recommended)"
        echo "  ‚Ä¢ 'task up' - Run with Docker Compose"
        echo ""
        echo "Services will be available at:"
        echo "  ‚Ä¢ Management UI: http://localhost:8081 (admin/admin)"
        echo "  ‚Ä¢ Health Monitor: http://localhost:8082"
        echo "  ‚Ä¢ NATS Monitor: http://localhost:8222"

  stop:
    desc: Stop all services
    cmds:
      - pkill -f "go run main.go" || echo "No Go services running"
      - task: infra:stop
      - '{{.CONTAINER_TOOL}} compose down 2>/dev/null || true'
      - echo "‚úÖ All services stopped"

  dev:
    desc: Start ALL services in tmux sessions (recommended - one command setup!)
    cmds:
      - task: infra:start-dev
      - |
        if ! command -v tmux &> /dev/null; then
          echo "‚ùå tmux not installed. Install with:"
          echo "  macOS: brew install tmux"
          echo "  Ubuntu: sudo apt install tmux"
          exit 1
        fi
        
        # Kill any existing session
        tmux kill-session -t nats-ha 2>/dev/null || true
        
        # Create new session
        tmux new-session -d -s nats-ha -n discovery
        tmux send-keys -t nats-ha:discovery "cd services/discovery && go run main.go" C-m
        
        tmux new-window -t nats-ha -n health-monitor
        tmux send-keys -t nats-ha:health-monitor "cd services/health-monitor && go run main.go" C-m
        
        tmux new-window -t nats-ha -n management-ui
        tmux send-keys -t nats-ha:management-ui "cd services/management-ui && go run main.go" C-m
        
        echo "üöÄ All services started in tmux session 'nats-ha'"
        echo ""
        echo "Available at:"
        echo "  ‚Ä¢ Management UI: http://localhost:8081 (admin/admin)"
        echo "  ‚Ä¢ Health Monitor: http://localhost:8082"
        echo "  ‚Ä¢ NATS Monitor: http://localhost:8222"
        echo ""
        echo "To attach to session: tmux attach -t nats-ha"
        echo "To switch windows: Ctrl+b then 0/1/2"
        echo "To detach: Ctrl+b then d"

  # === DOCKER COMPOSE TASKS ===
  up:
    desc: Start all services with Docker Compose
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.example .env
          echo "Created .env file from template"
        fi
      - '{{.CONTAINER_TOOL}} compose up -d'
      - |
        echo "üöÄ Services starting with Docker Compose..."
        echo ""
        echo "Available at:"
        echo "  ‚Ä¢ Management UI: http://localhost:8081 (admin/admin)"
        echo "  ‚Ä¢ Health Monitor: http://localhost:8082"
        echo "  ‚Ä¢ NATS Monitor: http://localhost:8222"
        echo ""
        echo "View logs: task logs"
        echo "Stop services: task down"

  up:full:
    desc: Start all services including Home Assistant
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        mkdir -p homeassistant-config
      - '{{.CONTAINER_TOOL}} compose -f docker-compose.full.yml up -d'
      - |
        echo "üöÄ Full stack starting..."
        echo ""
        echo "Available at:"
        echo "  ‚Ä¢ Home Assistant: http://localhost:8123"
        echo "  ‚Ä¢ Management UI: http://localhost:8081 (admin/admin)"
        echo "  ‚Ä¢ Health Monitor: http://localhost:8082"
        echo "  ‚Ä¢ NATS Monitor: http://localhost:8222"

  up:prod:
    desc: Start services using pre-built GHCR images
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.example .env
          echo "Created .env file from template"
        fi
      - '{{.CONTAINER_TOOL}} compose -f docker-compose.prod.yml up -d'
      - |
        echo "üöÄ Production services starting with GHCR images..."
        echo ""
        echo "Available at:"
        echo "  ‚Ä¢ Management UI: http://localhost:8081 (admin/admin)"
        echo "  ‚Ä¢ Health Monitor: http://localhost:8082"
        echo "  ‚Ä¢ NATS Monitor: http://localhost:8222"
        echo ""
        echo "Using images from: ghcr.io/$${GITHUB_REPOSITORY:-calmera/nats-home-automation}"

  down:
    desc: Stop Docker Compose services
    cmds:
      - '{{.CONTAINER_TOOL}} compose down'
      - '{{.CONTAINER_TOOL}} compose -f docker-compose.full.yml down 2>/dev/null || true'

  logs:
    desc: View Docker Compose logs
    cmds:
      - '{{.CONTAINER_TOOL}} compose logs -f {{.CLI_ARGS}}'

  build:
    desc: Build all Docker images
    cmds:
      - '{{.CONTAINER_TOOL}} compose build'

  # === MONITORING TASKS ===
  monitor:
    desc: Monitor all NATS subjects
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} sub "home.>"

  monitor:devices:
    desc: Monitor device states and events
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} sub "home.devices.>"

  status:
    desc: Check status of all services
    cmds:
      - |
        echo "=== NATS Status ==="
        nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} server check connection 2>/dev/null && echo "‚úÖ NATS: Connected" || echo "‚ùå NATS: Not available"
        
        echo ""
        echo "=== Web Services ==="
        curl -s http://localhost:8081 >/dev/null 2>&1 && echo "‚úÖ Management UI: http://localhost:8081" || echo "‚ùå Management UI: Not available"
        curl -s http://localhost:8082 >/dev/null 2>&1 && echo "‚úÖ Health Monitor: http://localhost:8082" || echo "‚ùå Health Monitor: Not available"
        curl -s http://localhost:8222/healthz >/dev/null 2>&1 && echo "‚úÖ NATS Monitor: http://localhost:8222" || echo "‚ùå NATS Monitor: Not available"
        
        echo ""
        echo "=== Containers ==="
        {{.CONTAINER_TOOL}} ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(nats|home)" || echo "No containers running"

  # === TESTING TASKS ===
  test:
    desc: Run all tests
    cmds:
      - cd tests && task default

  test:connection:
    desc: Test NATS connection and messaging
    vars:
      NATS_CMD: 'nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}}'
    cmds:
      - echo "Testing NATS connection..."
      - '{{.NATS_CMD}} server check connection'
      - echo "Testing publish/subscribe..."
      - 'echo "test message" | {{.NATS_CMD}} pub home.test.message'
      - echo "‚úÖ NATS connection test passed"

  # === CONTAINER TASKS ===
  build-images:
    desc: Build container images locally
    vars:
      SERVICES: '{{default "discovery,management-ui,health-monitor" .SERVICES}}'
      REGISTRY: '{{default "ghcr.io" .REGISTRY}}'
      IMAGE_PREFIX: '{{default "calmera/nats-home-automation" .IMAGE_PREFIX}}'
    cmds:
      - |
        echo "Building container images..."
        # Use a portable approach for parsing comma-separated values
        echo "{{.SERVICES}}" | tr ',' '\n' | while read service; do
          echo "Building $service..."
          {{.CONTAINER_TOOL}} build -t {{.REGISTRY}}/{{.IMAGE_PREFIX}}/$service:latest ./services/$service
        done
        echo "‚úÖ Images built successfully"

  push-images:
    desc: Push container images to registry (requires login)
    vars:
      SERVICES: '{{default "discovery,management-ui,health-monitor" .SERVICES}}'
      REGISTRY: '{{default "ghcr.io" .REGISTRY}}'
      IMAGE_PREFIX: '{{default "calmera/nats-home-automation" .IMAGE_PREFIX}}'
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - |
        echo "Pushing container images to {{.REGISTRY}}..."
        # Use a portable approach for parsing comma-separated values
        echo "{{.SERVICES}}" | tr ',' '\n' | while read service; do
          echo "Pushing $service..."
          {{.CONTAINER_TOOL}} tag {{.REGISTRY}}/{{.IMAGE_PREFIX}}/$service:latest {{.REGISTRY}}/{{.IMAGE_PREFIX}}/$service:{{.TAG}}
          {{.CONTAINER_TOOL}} push {{.REGISTRY}}/{{.IMAGE_PREFIX}}/$service:{{.TAG}}
          if [ "{{.TAG}}" != "latest" ]; then
            {{.CONTAINER_TOOL}} push {{.REGISTRY}}/{{.IMAGE_PREFIX}}/$service:latest
          fi
        done
        echo "‚úÖ Images pushed successfully"

  registry-login:
    desc: Login to GitHub Container Registry
    cmds:
      - |
        echo "Logging into GitHub Container Registry..."
        echo "Please provide your GitHub token when prompted"
        {{.CONTAINER_TOOL}} login ghcr.io -u {{.CLI_ARGS}}

  # === UTILITY TASKS ===
  clean:
    desc: Clean all build artifacts and logs
    cmds:
      - task: services:clean
      - task: tools:clean
      - find . -name "*.log" -type f -delete
      - find . -name "coverage.*" -type f -delete
      - find . -name ".task" -type d -exec rm -rf {} + 2>/dev/null || true
      - echo "‚úÖ Cleanup complete"

  nats:
    desc: Open NATS CLI with project credentials
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} {{.CLI_ARGS}}

  # Legacy aliases for compatibility
  start-prod:
    desc: "Alias for 'task start'"
    cmds:
      - task: start

  compose:up:
    desc: "Alias for 'task up'"
    cmds:
      - task: up

  compose:down:
    desc: "Alias for 'task down'"
    cmds:
      - task: down