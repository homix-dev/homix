version: '3'

vars:
  APP_NAME: nats-ha
  GO_FILES: 
    sh: find . -name '*.go' -not -path './vendor/*'
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  BUILD_TIME:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: '-X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}}'

tasks:
  build:
    desc: Build CLI tool
    cmds:
      - |
        # Determine the correct directory
        if [ -f "go.mod" ]; then
          # We're already in the right directory
          go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}} .
        elif [ -f "tools/nats-ha-cli/go.mod" ]; then
          # We're in the root directory
          cd tools/nats-ha-cli && go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}} .
        else
          echo "Error: Cannot find go.mod file"
          exit 1
        fi

  build-all:
    desc: Build for all platforms
    cmds:
      - task: build-linux
      - task: build-darwin
      - task: build-windows

  build-linux:
    desc: Build for Linux
    vars:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - |
        if [ -f "go.mod" ]; then
          GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}} .
        elif [ -f "tools/nats-ha-cli/go.mod" ]; then
          cd tools/nats-ha-cli && GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}} .
        else
          echo "Error: Cannot find go.mod file"
          exit 1
        fi

  build-darwin:
    desc: Build for macOS
    vars:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - |
        if [ -f "go.mod" ]; then
          GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}} .
          GOOS={{.GOOS}} GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-arm64 .
        elif [ -f "tools/nats-ha-cli/go.mod" ]; then
          cd tools/nats-ha-cli && GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}} .
          cd tools/nats-ha-cli && GOOS={{.GOOS}} GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-arm64 .
        else
          echo "Error: Cannot find go.mod file"
          exit 1
        fi

  build-windows:
    desc: Build for Windows
    vars:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - |
        if [ -f "go.mod" ]; then
          GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}}.exe .
        elif [ -f "tools/nats-ha-cli/go.mod" ]; then
          cd tools/nats-ha-cli && GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.LDFLAGS}}" -o bin/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}}.exe .
        else
          echo "Error: Cannot find go.mod file"
          exit 1
        fi

  run:
    desc: Run CLI
    deps: [build]
    vars:
      NATS_USER: '{{default "home" .NATS_USER}}'
      NATS_PASSWORD: '{{default "changeme" .NATS_PASSWORD}}'
      NATS_SERVER: '{{default "nats://localhost:4222" .NATS_SERVER}}'
    cmds:
      - |
        # Add authentication if not already provided in CLI_ARGS
        AUTH_ARGS=""
        if [[ ! "{{.CLI_ARGS}}" =~ "--user" ]]; then
          AUTH_ARGS="$AUTH_ARGS --user {{.NATS_USER}}"
        fi
        if [[ ! "{{.CLI_ARGS}}" =~ "--password" ]]; then
          AUTH_ARGS="$AUTH_ARGS --password {{.NATS_PASSWORD}}"
        fi
        if [[ ! "{{.CLI_ARGS}}" =~ "--server" ]]; then
          AUTH_ARGS="$AUTH_ARGS --server {{.NATS_SERVER}}"
        fi
        
        if [ -f "bin/{{.APP_NAME}}" ]; then
          ./bin/{{.APP_NAME}} $AUTH_ARGS {{.CLI_ARGS}}
        elif [ -f "tools/nats-ha-cli/bin/{{.APP_NAME}}" ]; then
          ./tools/nats-ha-cli/bin/{{.APP_NAME}} $AUTH_ARGS {{.CLI_ARGS}}
        else
          echo "Error: Binary not found. Run 'task build' first."
          exit 1
        fi

  run-tui:
    desc: Run TUI interface
    deps: [build]
    vars:
      NATS_USER: '{{default "home" .NATS_USER}}'
      NATS_PASSWORD: '{{default "changeme" .NATS_PASSWORD}}'
      NATS_SERVER: '{{default "nats://localhost:4222" .NATS_SERVER}}'
    cmds:
      - |
        if [ -f "bin/{{.APP_NAME}}" ]; then
          ./bin/{{.APP_NAME}} tui --user {{.NATS_USER}} --password {{.NATS_PASSWORD}} --server {{.NATS_SERVER}}
        elif [ -f "tools/nats-ha-cli/bin/{{.APP_NAME}}" ]; then
          ./tools/nats-ha-cli/bin/{{.APP_NAME}} tui --user {{.NATS_USER}} --password {{.NATS_PASSWORD}} --server {{.NATS_SERVER}}
        else
          echo "Error: Binary not found. Run 'task build' first."
          exit 1
        fi

  install:
    desc: Install CLI to /usr/local/bin
    deps: [build]
    cmds:
      - |
        echo "Installing {{.APP_NAME}} to /usr/local/bin..."
        if [ -f "bin/{{.APP_NAME}}" ]; then
          sudo cp bin/{{.APP_NAME}} /usr/local/bin/
        elif [ -f "tools/nats-ha-cli/bin/{{.APP_NAME}}" ]; then
          sudo cp tools/nats-ha-cli/bin/{{.APP_NAME}} /usr/local/bin/
        else
          echo "Error: Binary not found. Run 'task build' first."
          exit 1
        fi
        sudo chmod +x /usr/local/bin/{{.APP_NAME}}
        echo "✅ Installed {{.APP_NAME}} to /usr/local/bin/"
        echo "You can now run: {{.APP_NAME}}"

  install-gopath:
    desc: Install CLI to GOPATH
    deps: [build]
    cmds:
      - go install -ldflags="{{.LDFLAGS}}" .
      - echo "Installed {{.APP_NAME}} to $(go env GOPATH)/bin"

  uninstall:
    desc: Uninstall CLI from /usr/local/bin
    cmds:
      - |
        echo "Uninstalling {{.APP_NAME}} from /usr/local/bin..."
        sudo rm -f /usr/local/bin/{{.APP_NAME}}
        echo "✅ Uninstalled {{.APP_NAME}}"

  test:
    desc: Run tests
    cmds:
      - |
        if [ -f "go.mod" ]; then
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
        elif [ -f "tools/nats-ha-cli/go.mod" ]; then
          cd tools/nats-ha-cli && go test -v -race -coverprofile=coverage.out ./...
          cd tools/nats-ha-cli && go tool cover -html=coverage.out -o coverage.html
        else
          echo "Error: Cannot find go.mod file"
          exit 1
        fi

  test-integration:
    desc: Run integration tests
    cmds:
      - go test -v -race -tags=integration ./...

  lint:
    desc: Run linters
    deps: [install-golangci-lint]
    cmds:
      - golangci-lint run ./...

  format:
    desc: Format code
    cmds:
      - go fmt ./...
      - go mod tidy

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -f coverage.out coverage.html

  deps:
    desc: Download dependencies
    cmds:
      - go mod download
      - go mod verify

  update-deps:
    desc: Update dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  # Development helpers
  dev-device-list:
    desc: List devices using CLI
    deps: [build]
    cmds:
      - ./bin/{{.APP_NAME}} device list

  dev-device-info:
    desc: Get device info
    deps: [build]
    vars:
      DEVICE_ID: '{{default "test-device" .DEVICE_ID}}'
    cmds:
      - ./bin/{{.APP_NAME}} device info {{.DEVICE_ID}}

  dev-config-list:
    desc: List configurations
    deps: [build]
    cmds:
      - ./bin/{{.APP_NAME}} config list

  dev-monitor:
    desc: Monitor device events
    deps: [build]
    cmds:
      - ./bin/{{.APP_NAME}} device monitor

  test-cli:
    desc: Test CLI commands
    deps: [build]
    cmds:
      - echo "Testing NATS HA CLI..."
      - echo ""
      - echo "1. Testing device list:"
      - ./bin/{{.APP_NAME}} device list --server nats://localhost:4222 --user home --password changeme
      - echo ""
      - echo "2. Testing config list:"
      - ./bin/{{.APP_NAME}} config list --server nats://localhost:4222 --user home --password changeme
      - echo ""
      - echo "3. To test the TUI, run:"
      - echo "   task run-tui"
      - echo ""
      - echo "   TUI Navigation:"
      - echo "   - Use arrow keys (↑/↓) to navigate"
      - echo "   - Press Enter or Space to select"
      - echo "   - Press 'q' to quit from main menu"
      - echo "   - Press Esc to go back"

  demo:
    desc: Run CLI demo showing various features
    deps: [build]
    vars:
      SERVER: '{{default "nats://localhost:4222" .NATS_SERVER}}'
      USER: '{{default "home" .NATS_USER}}'
      PASSWORD: '{{default "changeme" .NATS_PASSWORD}}'
    cmds:
      - echo "NATS Home Automation CLI Demo"
      - echo "============================="
      - echo ""
      - echo "=== 1. Device Management ==="
      - echo ""
      - echo "$ {{.APP_NAME}} device list"
      - ./bin/{{.APP_NAME}} device list --server {{.SERVER}} --user {{.USER}} --password {{.PASSWORD}}
      - echo ""
      - echo "$ {{.APP_NAME}} device list --type sensor --online"
      - ./bin/{{.APP_NAME}} device list --type sensor --online --server {{.SERVER}} --user {{.USER}} --password {{.PASSWORD}}
      - echo ""
      - echo "=== 2. Configuration Management ==="
      - echo ""
      - echo "$ {{.APP_NAME}} config list"
      - ./bin/{{.APP_NAME}} config list --server {{.SERVER}} --user {{.USER}} --password {{.PASSWORD}}
      - echo ""
      - echo "=== 3. Real-time Monitoring ==="
      - echo ""
      - echo "To watch real-time state changes:"
      - echo "  {{.APP_NAME}} watch states"
      - echo ""
      - echo "To watch specific device type:"
      - echo "  {{.APP_NAME}} watch states sensor"
      - echo ""
      - echo "To watch system events:"
      - echo "  {{.APP_NAME}} watch events"
      - echo ""
      - echo "=== 4. TUI Mode ==="
      - echo ""
      - echo "To launch the interactive Terminal UI:"
      - echo "  {{.APP_NAME}} tui"
      - echo ""
      - echo "=== Demo Complete ==="
      - echo ""
      - echo "For more information:"
      - echo "  - Run '{{.APP_NAME}} --help' for all commands"
      - echo "  - Run '{{.APP_NAME}} <command> --help' for command-specific help"

  # Tool installation
  install-golangci-lint:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    status:
      - which golangci-lint

  # Release tasks
  release:
    desc: Create a new release
    deps: [test, lint]
    cmds:
      - task: build-all
      - echo "Release builds created in bin/"
      - ls -la bin/

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.APP_NAME}}:{{.VERSION}} -t {{.APP_NAME}}:latest .

  completion:
    desc: Generate shell completions
    deps: [build]
    cmds:
      - mkdir -p completions
      - ./bin/{{.APP_NAME}} completion bash > completions/{{.APP_NAME}}.bash
      - ./bin/{{.APP_NAME}} completion zsh > completions/{{.APP_NAME}}.zsh
      - ./bin/{{.APP_NAME}} completion fish > completions/{{.APP_NAME}}.fish
      - echo "Completions generated in completions/"