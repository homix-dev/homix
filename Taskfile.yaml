version: '3'

vars:
  NATS_SERVER: "nats://localhost:4222"
  NATS_USER: "home"
  NATS_PASS: "changeme"

includes:
  services: ./services/Taskfile.yaml
  tools: ./tools/Taskfile.yaml
  bridges: ./bridges/Taskfile.yaml
  esphome: ./esphome-components/Taskfile.yaml
  infra: ./infrastructure/Taskfile.yaml

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  setup:
    desc: Initial project setup
    cmds:
      - task: infra:setup
      - task: install-deps
      - echo "Setup complete! Run 'task infra:start-dev' to start NATS in development mode"
      - echo "Or 'task infra:start' for production mode with Synadia Cloud"

  setup-dev:
    desc: Setup and start in development mode
    cmds:
      - task: infra:setup
      - task: install-deps
      - task: infra:start-dev
      - echo "Development setup complete! NATS server running on localhost:4222"

  setup-minimal:
    desc: Minimal setup - just NATS infrastructure
    cmds:
      - task: infra:setup
      - task: infra:start-dev
      - |
        echo "Minimal setup complete! NATS server running on localhost:4222"
        echo "Connection details: nats://home:changeme@localhost:4222"
        echo ""
        echo "To install additional dependencies later:"
        echo "  - NATS CLI: go install github.com/nats-io/natscli/nats@latest"
        echo "  - Python deps: pip3 install nats-py"
        echo "  - ESPHome: pip3 install esphome"

  install-deps:
    desc: Install all project dependencies
    cmds:
      - echo "Installing NATS CLI..."
      - go install github.com/nats-io/natscli/nats@latest || echo "Warning - Failed to install NATS CLI. Please install Go first."
      - echo "Installing Go dependencies..."
      - cd services/discovery && go mod download || echo "Warning - Failed to download Go dependencies"
      - cd tools/nats-ha-cli && go mod download || echo "Warning - Failed to download Go dependencies"
      - task: install-python-deps

  start:
    desc: Start all services
    cmds:
      - task: infra:start-dev
      - task: services:discovery:run

  dev:
    desc: Run in development mode with all services
    cmds:
      - task: infra:start-dev
      - echo "Starting discovery service..."
      - task: services:discovery:run

  start-prod:
    desc: Start all services in production mode
    cmds:
      - task: infra:start
      - task: services:discovery:run

  stop:
    desc: Stop all services
    cmds:
      - task: infra:stop

  test:
    desc: Run all tests
    cmds:
      - task: services:test
      - task: tools:test
      - task: bridges:test

  build:
    desc: Build all components
    cmds:
      - task: services:build
      - task: tools:build
      - task: bridges:build

  clean:
    desc: Clean all build artifacts
    cmds:
      - task: services:clean
      - task: tools:clean
      - task: bridges:clean
      - find . -name "*.pyc" -delete
      - find . -name "__pycache__" -type d -exec rm -rf {} +
      - find . -name ".esphome" -type d -exec rm -rf {} +

  clean-all:
    desc: Deep clean - remove all artifacts, logs, and generated files
    cmds:
      - task: clean
      - find . -name "*.log" -type f -delete
      - find . -name "coverage.out" -type f -delete
      - find . -name "coverage.html" -type f -delete
      - find . -name "*.tmp" -type f -delete
      - find . -name "*.bak" -type f -delete
      - find . -name ".task" -type d -exec rm -rf {} +
      - rm -rf infrastructure/data/nats-server.log
      - rm -rf infrastructure/nats-data
      - echo "[OK] Deep clean complete"

  lint:
    desc: Run linters for all components
    cmds:
      - task: services:lint
      - task: tools:lint
      - task: esphome:lint

  format:
    desc: Format all code
    cmds:
      - task: services:format
      - task: tools:format

  # Development helpers
  nats-cli:
    desc: Open NATS CLI with project credentials
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} {{.CLI_ARGS}}

  monitor:
    desc: Monitor NATS subjects
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} sub "home.>"

  monitor-discovery:
    desc: Monitor device discovery
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} sub "home.discovery.>"

  monitor-devices:
    desc: Monitor device states
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} sub "home.devices.>"

  announce-test:
    desc: Send test device announcement
    cmds:
      - |
        echo '{"device_id":"test-device","device_type":"sensor","device_name":"Test Device","status":"online"}' | \
        nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} pub home.discovery.announce

  kv-list:
    desc: List all KV buckets
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} kv ls

  devices-list:
    desc: List registered devices
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} kv get devices --all

  config-list:
    desc: List device configurations
    cmds:
      - nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}} kv get device-configs --all

  validate:
    desc: Validate all task files
    cmds:
      - echo "Validating Taskfiles..."
      - task --list-all > /dev/null && echo "✅ All Taskfiles are valid" || echo "❌ Taskfile validation failed"

  test-nats:
    desc: Test NATS messaging
    vars:
      NATS_CMD: 'nats --server={{.NATS_SERVER}} --user={{.NATS_USER}} --password={{.NATS_PASS}}'
    cmds:
      - echo "Testing NATS messaging..."
      - echo "Publishing test message..."
      - '{{.NATS_CMD}} pub home.test.message "Hello NATS"'
      - echo "Test complete - check 'task monitor' output to see the message"

  install-python-deps:
    desc: Install Python dependencies
    cmds:
      - |
        echo "Installing Python dependencies..."
        if command -v pip3 >/dev/null 2>&1; then
          echo "Using pip3..."
          pip3 install --user nats-py || pip3 install --break-system-packages nats-py
          echo "Note - ESPHome requires additional setup. Install with - pip3 install --user esphome"
        elif command -v pip >/dev/null 2>&1; then
          echo "Using pip..."
          pip install --user nats-py || pip install --break-system-packages nats-py
          echo "Note - ESPHome requires additional setup. Install with - pip install --user esphome"
        else
          echo "⚠️  Python pip not found. Please install Python 3 and pip."
          echo "   On macOS - brew install python3"
          echo "   On Ubuntu/Debian - sudo apt install python3-pip"
          echo "   On Fedora - sudo dnf install python3-pip"
          echo ""
          echo "After installing pip, run - pip3 install nats-py esphome"
        fi

  check-deps:
    desc: Check installed dependencies
    cmds:
      - |
        echo "Checking dependencies..."
        echo ""
        echo "Container tool:"
        if command -v docker >/dev/null 2>&1; then
          echo "  ✅ Docker: $(docker --version)"
        else
          echo "  ❌ Docker: not found"
        fi
        if command -v podman >/dev/null 2>&1; then
          echo "  ✅ Podman: $(podman --version)"
        else
          echo "  ❌ Podman: not found"
        fi
        echo ""
        echo "Go:"
        if command -v go >/dev/null 2>&1; then
          echo "  ✅ Go: $(go version)"
        else
          echo "  ❌ Go: not found (needed for services)"
        fi
        echo ""
        echo "Python:"
        if command -v python3 >/dev/null 2>&1; then
          echo "  ✅ Python3: $(python3 --version)"
        else
          echo "  ❌ Python3: not found"
        fi
        if command -v pip3 >/dev/null 2>&1; then
          echo "  ✅ pip3: found"
        else
          echo "  ❌ pip3: not found"
        fi
        if command -v pip >/dev/null 2>&1; then
          echo "  ✅ pip: found"
        else
          echo "  ❌ pip: not found"
        fi
        echo ""
        echo "NATS CLI:"
        if command -v nats >/dev/null 2>&1; then
          echo "  ✅ NATS CLI: $(nats --version)"
        else
          echo "  ❌ NATS CLI: not found (install with - go install github.com/nats-io/natscli/nats@latest)"
        fi

  install:
    desc: Install all binaries to /usr/local/bin
    cmds:
      - echo "Installing NATS Home Automation binaries..."
      - task: services:discovery:install
      - task: tools:cli:install
      - echo ""
      - echo "✅ Installation complete!"
      - echo ""
      - echo "Installed binaries:"
      - 'echo "  - discovery-service: Device discovery and registry service"'
      - 'echo "  - nats-ha: CLI tool for managing NATS home automation"'
      - echo ""
      - echo "To run the discovery service:"
      - echo "  discovery-service"
      - echo ""
      - echo "To use the CLI:"
      - echo "  nats-ha --help"
      - echo "  nats-ha device list"
      - echo "  nats-ha tui"

  uninstall:
    desc: Uninstall all binaries from /usr/local/bin
    cmds:
      - echo "Uninstalling NATS Home Automation binaries..."
      - task: services:discovery:uninstall
      - task: tools:cli:uninstall
      - echo "✅ Uninstallation complete!"